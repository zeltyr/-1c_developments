#Область ОписаниеПеременных

&НаКлиенте
Перем Клиенты;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.широта = "54.9189335";
	Объект.долгота = "82.9517981";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатыПоиска

&НаКлиенте
Процедура РезультатыПоискаПриАктивизацииСтроки(Элемент)
	
	Данные = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Клиенты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Идентификатор) Тогда
		
		ДанныеКонтрагента = Клиенты.Получить("" + Данные.НомерСтроки + Данные.Идентификатор);
		ВывестиДанныеВТаблицуДанных(ДанныеКонтрагента);	
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьОрганизацию(Команда)
	
	ПолучитьОрганизациюПоСтроке(Объект.СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОрганизациюПоИНН(Команда)
	
	ПолучитьОрганизациюПоСтроке(Объект.СтрокаПоиска, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьАдресПоСтроке(Команда)
	
	Клиенты = Новый Соответствие;
	
	Данные = ПолучитьДаныеАдресаПоСтроке(Объект.СтрокаПоиска);
	ДанныеОтвета = ОбработатьОтветСервисаDaData(Данные);
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеАдреса = ПрочитатьОтветОтDaData(ДанныеОтвета);
	Если НайденныеАдреса.Количество() = 0 Тогда
		
		Текстсообщения = НСтр("ru='Не найдено адресов по геокоординатам!'");
		СообщитьПользователю(Текстсообщения);
		Возврат;
		
	Иначе
		
		Для каждого Адрес из НайденныеАдреса Цикл
			
			НовСтр = Объект.РезультатыПоиска.Добавить();
			ДанныеАдреса = РазобратьОтветПоискаАдреса(Адрес);
			Клиенты.Вставить("" + НовСтр.НомерСтроки + ДанныеАдреса.Ид_ФИАС, ДанныеАдреса);
			НовСтр.Название = Адрес.value;
			НовСтр.Идентификатор = ДанныеАдреса.Ид_ФИАС;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАдресаПоГеокоординатам(Команда)
	
	Клиенты = Новый Соответствие;
	
	Данные = ПолучитьДаныеАдресаПоГеокоординатам(Объект.широта, Объект.долгота);
	ДанныеОтвета = ОбработатьОтветСервисаDaData(Данные);
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеАдреса = ПрочитатьОтветОтDaData(ДанныеОтвета);
	Если НайденныеАдреса.Количество() = 0 Тогда
		СообщитьПользователю("Не найдено адресов по геокоординатам!");
		Возврат;
		
	Иначе
		
		Для каждого Адрес из НайденныеАдреса Цикл
			НовСтр = Объект.РезультатыПоиска.Добавить();
			ДанныеАдреса = РазобратьОтветПоискаАдреса(Адрес);
			Клиенты.Вставить("" + НовСтр.НомерСтроки + ДанныеАдреса.Ид_ФИАС, ДанныеАдреса);
			НовСтр.Название = Адрес.value;
			НовСтр.Идентификатор = ДанныеАдреса.Ид_ФИАС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистику(Команда)
	ПолучитьСтраницуЗапросомGET();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьОрганизациюПоСтроке(пСтрока, ЭтоИНН = Ложь)
	
	Клиенты = Новый Соответствие;
	
	Данные = ПолучитьДаныеОрганизацийИзСервисаDaData(пСтрока, ЭтоИНН);
	ДанныеОтвета = ОбработатьОтветСервисаDaData(Данные);
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеКлиенты = ПрочитатьОтветОтDaData(ДанныеОтвета);
	Если НайденныеКлиенты.Количество() = 0 Тогда
		Текстсообщения = НСтр("ru='Не найдено клиента по %1!'");
		Если ЭтоИНН Тогда
			Текстсообщения = СтрШаблон(Текстсообщения, "указанному ИНН");
		Иначе
			Текстсообщения = СтрШаблон(Текстсообщения, "указанной строке");
		КонецЕсли;
		СообщитьПользователю(Текстсообщения);
		Возврат;
		
	Иначе
		
		Для каждого Контрагент из НайденныеКлиенты Цикл
			
			НовСтр = Объект.РезультатыПоиска.Добавить();
			ДанныеКонтрагента = РазобратьОтветПоискаОрганизации (Контрагент);
			Клиенты.Вставить("" + НовСтр.НомерСтроки + ДанныеКонтрагента.Ид, ДанныеКонтрагента);
			ЗаполнитьЗначенияСвойств(НовСтр, ДанныеКонтрагента);
			НовСтр.Идентификатор = ДанныеКонтрагента.Ид;
			
			Если ДанныеКонтрагента.ПризнакГоловнойОрганизации Тогда
				ГоловнаяОрганизация = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		ДанныеКонтрагента = РазобратьОтветПоискаОрганизации (ГоловнаяОрганизация);
		
	КонецЕсли;
	
	ВывестиДанныеВТаблицуДанных(ДанныеКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьОтветСервисаDaData(Данные)
	
	Если Данные.КодСостояния <> 200 Тогда
		
		ДанныеОтвета = Неопределено;
		Текстсообщения = НСтр("ru='Ошибка соединения с сервисом!'");
		СообщитьПользователю(Текстсообщения);
		
	Иначе
		
		ДанныеОтвета = Данные.ПолучитьТелоКакСтроку();
		Объект.РезультатыПоиска.Очистить();
		ДетальнаяИнформация.Очистить();
		
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции


#область Работа_с_сервисом_DaData

&НаКлиенте
Функция ПолучитьДаныеАдресаПоГеокоординатам(Широта, Долгота) Экспорт
	СоответствиеДанные = Новый Соответствие;
	СоответствиеДанные.Вставить("lat", Широта);
	СоответствиеДанные.Вставить("lon", Долгота);
	//МассивСтатусов = Новый Массив;
	////МассивСтатусов.Добавить("ACTIVE");
	//СоответствиеДанные.Вставить("status", МассивСтатусов);
	Сервер = "suggestions.dadata.ru";
	СтрокаЗапроса = "/suggestions/api/4_1/rs/geolocate/address";
	Возврат ПОСТ(СтрокаЗапроса, СоответствиеДанные, Сервер, Токен);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДаныеАдресаПоСтроке(Строка) Экспорт
	СоответствиеДанные = Новый Соответствие;
	СоответствиеДанные.Вставить("query", Строка);
	//МассивСтатусов = Новый Массив;
	//МассивСтатусов.Добавить("ACTIVE");
	//СоответствиеДанные.Вставить("status", МассивСтатусов);
	Сервер = "suggestions.dadata.ru";
	СтрокаЗапроса = "/suggestions/api/4_1/rs/suggest/address";
	Возврат ПОСТ(СтрокаЗапроса, СоответствиеДанные, Сервер, Токен);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДаныеОрганизацийИзСервисаDaData(Строка, ЭтоИНН) Экспорт
	
	СоответствиеДанные = Новый Соответствие;
	СоответствиеДанные.Вставить("query", Строка);
	Сервер = "suggestions.dadata.ru";
	Если ЭтоИНН Тогда
		СтрокаЗапроса = "/suggestions/api/4_1/rs/findById/party";
	Иначе
		СтрокаЗапроса = "/suggestions/api/4_1/rs/suggest/party";
	КонецЕсли;
	Возврат ПОСТ(СтрокаЗапроса, СоответствиеДанные, Сервер, Токен);
	
КонецФункции


&НаКлиенте
Функция ПолучитьСтраницуЗапросомGET()
	
	Сервер = "dadata.ru";
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl1);
	
	СтрокаЗапроса = "/api/v2/stat/daily?date=" + Формат(ТекущаяДата(), "ДФ = гггг-ММ-дд");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Token " + Токен);
	Заголовки.Вставить("X-Secret", СекретныйТокен);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	
	Попытка
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		Сообщить("Произошла сетевая ошибка!");
		Возврат Ложь;
	КонецПопытки;
	
	СтатистикаИспользования = "";
	Данные = ПрочитатьОтветОтDaData (Результат.ПолучитьТелоКакСтроку(), "services");
	Для каждого ЭЛЕМ из Данные Цикл
		СтатистикаИспользования = СтатистикаИспользования + ?(ЗначениеЗаполнено(СтатистикаИспользования), ";", "") + ЭЛЕМ.Ключ + ": " + ЭЛЕМ.Значение;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПОСТ(СтрокаЗапроса, СоответствиеДанные, Сервер, Токен)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СоответствиеДанные);
	СтрокаДанные = ЗаписьJSON.Закрыть();
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	Новый СертификатыУдостоверяющихЦентровWindows());
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl1);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Accept", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Token " + Токен);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаДанные, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	Попытка
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Сообщить("Произошла сетевая ошибка!");
		Возврат Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

//разбирает JSON-ответ, полученный от сервера Телеграмм в структуру
//
//ПАРАМЕТРЫ
//ТекстовыеДанныеОтвета - Строка - ответ от сервера Телеграм, в формате JSON
&НаКлиенте
Функция ПрочитатьОтветОтDaData (ТекстовыеДанныеОтвета, ИмяОтвета="suggestions")
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстовыеДанныеОтвета);
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	СписокЗапросов = Новый Структура;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЧтениеJSON.Закрыть();
		СписокЗапросов = Результат[ИмяОтвета];
		
	КонецЕсли;
	
	Возврат СписокЗапросов;
	
КонецФункции

#КонецОбласти //Работа_с_сервисом_DaData


&НаКлиенте
Функция РазобратьОтветПоискаОрганизации (ДанныеОтвета)
	ДанныеКонтрагента = Новый Структура;
	//	Базовые поля, заполняются для всех тарифов
	
	//value 	Наименование компании
	ВставитьСтрокуВструктуру("Название", ДанныеОтвета.value, ДанныеКонтрагента);
	//unrestricted_value 	= value
	
	//data.address 	Адрес
	//└ value 	— адрес одной строкой:
	ВставитьСтрокуВструктуру("АдресОрганизации", ДанныеОтвета.data.address.value, ДанныеКонтрагента);
	
	//    адрес организации для юридических лиц;
	//    город проживания для индивидуальных предпринимателей.
	
	//стандартизован, поэтому может отличаться от записанного в ЕГРЮЛ.
	//└ unrestricted_value 	— адрес одной строкой (полный, от региона)
	
	//стандартизован, поэтому может отличаться от записанного в ЕГРЮЛ.
	//└ data 	— гранулярный адрес
	//└ data.source 	— адрес одной строкой как в ЕГРЮЛ
	ВставитьСтрокуВструктуру("АдресОрганизацииЕГРЮЛ", ДанныеОтвета.data.address.data.source, ДанныеКонтрагента);
	
	ВставитьСтрокуВструктуру("Широта", ДанныеОтвета.data.address.data.geo_lat, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("Долгота", ДанныеОтвета.data.address.data.geo_lon, ДанныеКонтрагента);
	//└ data.qc 	— код проверки адреса
	
	//  0        — адрес распознан уверенно
	//  1 или 3  — требуется ручная проверка
	
	//data.branch_count 	Количество филиалов
	//data.branch_type 	Тип подразделения
	
	//  MAIN   — головная организация
	//  BRANCH — филиал
	Если ДанныеОтвета.data.Свойство("branch_count") Тогда
		ВставитьСтрокуВструктуру("КоличествоФиллиалов", ДанныеОтвета.data.branch_count, ДанныеКонтрагента);
	КонецЕсли;
	
	Если ДанныеОтвета.data.Свойство("branch_type") Тогда
		ВставитьСтрокуВструктуру("ПризнакГоловнойОрганизации", ДанныеОтвета.data.branch_type, ДанныеКонтрагента);
		Если ДанныеКонтрагента.ПризнакГоловнойОрганизации = "MAIN" Тогда
			ДанныеКонтрагента.ПризнакГоловнойОрганизации = Истина;
		Иначе
			ДанныеКонтрагента.ПризнакГоловнойОрганизации = Ложь;
		КонецЕсли;		 
	ИНаче
		ВставитьСтрокуВструктуру("ПризнакГоловнойОрганизации", Истина, ДанныеКонтрагента);
		
	КонецЕсли;
	
	//data.inn 	ИНН
	ВставитьСтрокуВструктуру("ИНН", ДанныеОтвета.data.inn, ДанныеКонтрагента);
	
	//data.kpp 	КПП
	Если ДанныеОтвета.data.Свойство("kpp") Тогда
		ВставитьСтрокуВструктуру("КПП", ДанныеОтвета.data.kpp, ДанныеКонтрагента);
	КонецЕсли;
	
	//data.ogrn 	ОГРН
	ВставитьСтрокуВструктуру("ОГРН", ДанныеОтвета.data.ogrn, ДанныеКонтрагента);
	
	//data.ogrn_date 	Дата выдачи ОГРН
	ВставитьДатуВструктуру("Дата_выдачи_ОГРН", ДанныеОтвета.data.ogrn_date, ДанныеКонтрагента);
	
	//data.hid 	Уникальный идентификатор в Дадате
	ВставитьСтрокуВструктуру("ИД", ДанныеОтвета.data.hid, ДанныеКонтрагента);
	
	//data.management 	Руководитель
	Если ДанныеОтвета.data.Свойство("management") И ЗначениеЗаполнено(ДанныеОтвета.data.management) Тогда
		//└ name 	— ФИО руководителя
		ВставитьСтрокуВструктуру("Руководитель_ФИО", ДанныеОтвета.data.management.name, ДанныеКонтрагента);
		//└ post 	— должность руководителя
		ВставитьСтрокуВструктуру("Руководитель_Должность", ДанныеОтвета.data.management.post, ДанныеКонтрагента);
	КонецЕсли;
	//data.name 	Наименование
	//└ full_with_opf 	— полное наименование с ОПФ
	ВставитьСтрокуВструктуру("ПолноеНаименование", ДанныеОтвета.data.name.full_with_opf, ДанныеКонтрагента);
	//└ short_with_opf 	— краткое наименование с ОПФ
	ВставитьСтрокуВструктуру("КраткоеНаименование", ДанныеОтвета.data.name.short_with_opf, ДанныеКонтрагента);
	//└ latin 	— наименование на латинице (не заполняется)
	//└ full 	— полное наименование
	//└ short 	— краткое наименование
	//data.okpo 	Код ОКПО (не заполняется)
	//data.okved 	Код ОКВЭД
	ВставитьСтрокуВструктуру("ОКВЭД", ДанныеОтвета.data.okved, ДанныеКонтрагента);
	//data.okved_type 	Версия справочника ОКВЭД (2001 или 2014)
	ВставитьСтрокуВструктуру("Версия_ОКВЭД", ДанныеОтвета.data.okved_type, ДанныеКонтрагента);
	//data.opf 	Организационно-правовая форма
	//└ code 	— код ОКОПФ
	//└ full 	— полное название ОПФ
	//└ short 	— краткое название ОПФ
	//└ type 	— версия справочника ОКОПФ (99, 2012 или 2014)
	//data.state 	Состояние
	//└ actuality_date 	— дата актуальности сведений
	ВставитьДатуВструктуру("Дата_актуальности_сведений", ДанныеОтвета.data.state.actuality_date, ДанныеКонтрагента);
	//└ registration_date 	— дата регистрации
	ВставитьДатуВструктуру("Дата_регистрации", ДанныеОтвета.data.state.registration_date, ДанныеКонтрагента);
	//└ liquidation_date 	— дата ликвидации
	ВставитьДатуВструктуру("Дата_ликвидации", ДанныеОтвета.data.state.liquidation_date, ДанныеКонтрагента);
	//└ status 	— статус организации
	//  ACTIVE       — действующая
	//  LIQUIDATING  — ликвидируется
	//  LIQUIDATED   — ликвидирована
	//  REORGANIZING — в процессе присоединения
	//                 к другому юрлицу,
	//                 с последующей ликвидацией
	Если ДанныеОтвета.data.state.status = "ACTIVE" Тогда
		Статус = "действующая";
	ИначеЕсли ДанныеОтвета.data.state.status = "LIQUIDATING" Тогда
		Статус = "ликвидируется";
	ИначеЕсли ДанныеОтвета.data.state.status = "LIQUIDATED" Тогда
		Статус = "ликвидирована";
	ИначеЕсли ДанныеОтвета.data.state.status = "REORGANIZING" Тогда
		Статус = "в процессе присоединения к другому юрлицу";
	Иначе
		Статус = ДанныеОтвета.data.state.status;
		
	КонецЕсли;
	
	ВставитьСтрокуВструктуру("СтатусОрганизации", Статус, ДанныеКонтрагента);
	
	//data.type 	Тип организации
	
	//  LEGAL      — юридическое лицо
	//  INDIVIDUAL — индивидуальный предприниматель	
	Если ДанныеОтвета.data.type = "LEGAL" Тогда
		ТипОрганизации = "юридическое лицо";
	ИначеЕсли ДанныеОтвета.data.type = "INDIVIDUAL" Тогда
		ТипОрганизации = "индивидуальный предприниматель";
	Иначе
		ТипОрганизации = ДанныеОтвета.data.type;
		
	КонецЕсли;
	ВставитьСтрокуВструктуру("ТипОрганизации", ТипОрганизации, ДанныеКонтрагента);
	
	Возврат ДанныеКонтрагента;	
КонецФункции

&НаКлиенте
Функция РазобратьОтветПоискаАдреса (ДанныеОтвета)
	
	//	Базовые поля, заполняются для всех тарифов
	//value 	Адрес одной строкой (как показывается в списке подсказок)
	//unrestricted_value 	Адрес одной строкой (полный, от региона)
	//data.postal_code 	Индекс
	//data.country 	Страна
	//data.country_iso_code 	ISO-код страны (двухсимвольный)
	//data.federal_district 	Федеральный округ
	//data.region_fias_id 	Код ФИАС региона
	//data.region_kladr_id 	Код КЛАДР региона
	//data.region_iso_code 	ISO-код региона
	//data.region_with_type 	Регион с типом
	//data.region_type 	Тип региона (сокращенный)
	//data.region_type_full 	Тип региона
	//data.region 	Регион
	//data.area_fias_id 	Код ФИАС района в регионе
	//data.area_kladr_id 	Код КЛАДР района в регионе
	//data.area_with_type 	Район в регионе с типом
	//data.area_type 	Тип района в регионе (сокращенный)
	//data.area_type_full 	Тип района в регионе
	//data.area 	Район в регионе
	//data.city_fias_id 	Код ФИАС города
	//data.city_kladr_id 	Код КЛАДР города
	//data.city_with_type 	Город с типом
	//data.city_type 	Тип города (сокращенный)
	//data.city_type_full 	Тип города
	//data.city 	Город
	//data.city_district_fias_id 	Код ФИАС района города (заполняется, только если район есть в ФИАС)
	//data.city_district_kladr_id 	Код КЛАДР района города (не заполняется)
	//data.city_district_with_type 	Район города с типом
	//data.city_district_type 	Тип района города (сокращенный)
	//data.city_district_type_full 	Тип района города
	//data.city_district 	Район города
	//data.settlement_fias_id 	Код ФИАС нас. пункта
	//data.settlement_kladr_id 	Код КЛАДР нас. пункта
	//data.settlement_with_type 	Населенный пункт с типом
	//data.settlement_type 	Тип населенного пункта (сокращенный)
	//data.settlement_type_full 	Тип населенного пункта
	//data.settlement 	Населенный пункт
	//data.street_fias_id 	Код ФИАС улицы
	//data.street_kladr_id 	Код КЛАДР улицы
	//data.street_with_type 	Улица с типом
	//data.street_type 	Тип улицы (сокращенный)
	//data.street_type_full 	Тип улицы
	//data.street 	Улица
	//data.house_fias_id 	Код ФИАС дома
	//data.house_kladr_id 	Код КЛАДР дома
	//data.house_type 	Тип дома (сокращенный)
	//data.house_type_full 	Тип дома
	//data.house 	Дом
	//data.block_type 	Тип корпуса/строения (сокращенный)
	//data.block_type_full 	Тип корпуса/строения
	//data.block 	Корпус/строение
	//data.flat_type 	Тип квартиры (сокращенный)
	//data.flat_type_full 	Тип квартиры
	//data.flat 	Квартира
	//data.postal_box 	Абонентский ящик
	//data.fias_id 	Код ФИАС:
	
	//    HOUSE.HOUSEGUID, если дом найден в ФИАС по точному совпадению;
	//    ADDROBJ.AOGUID в противном случае.
	
	//data.fias_level 	Уровень детализации, до которого адрес найден в ФИАС:
	
	//  0 — страна
	//  1 — регион
	//  3 — район
	//  4 — город
	//  5 — район города
	//  6 — населенный пункт
	//  7 — улица
	//  8 — дом
	// 65 — планировочная структура
	// -1 — иностранный или пустой
	
	//data.kladr_id 	Код КЛАДР
	//data.geoname_id 	Идентификатор объекта в базе GeoNames. Для российских адресов не заполняется.
	//data.capital_marker 	Признак центра района или региона:
	
	//  1 — центр района
	//      (Московская обл, Одинцовский р-н, г Одинцово)
	//  2 — центр региона
	//      (Новосибирская обл, г Новосибирск)
	//  3 — центр района и региона
	//      (Томская обл, г Томск)
	//  4 — центральный район региона
	//      (Тюменская обл, Тюменский р-н)
	//  0 — ничего из перечисленного
	//      (Московская обл, г Балашиха)
	
	//data.okato 	Код ОКАТО
	//data.oktmo 	Код ОКТМО
	//data.tax_office 	Код ИФНС для физических лиц
	//data.tax_office_legal 	Код ИФНС для организаций
	//data.history_values[ ] 	Список исторических названий объекта нижнего уровня.
	//Если подсказка до улицы — это прошлые названия этой улицы, если до города — города.
	
	
	
	ДанныеАдреса = Новый Структура;
	
	//	Базовые поля, заполняются для всех тарифов
	ВставитьСтрокуВструктуру("Адрес", ДанныеОтвета.value, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Ид_ФИАС", ДанныеОтвета.data.fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Ид_Кладр", ДанныеОтвета.data.kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Индекс", ДанныеОтвета.data.postal_code, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Страна", ДанныеОтвета.data.country, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Страна_ISO_код", ДанныеОтвета.data.country_iso_code, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Регион", ДанныеОтвета.data.region_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Регион_idФИАС", ДанныеОтвета.data.region_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Регион_idКладр", ДанныеОтвета.data.region_kladr_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Регион_ISO_код", ДанныеОтвета.data.region_iso_code, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Район", ДанныеОтвета.data.area_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_idФИАС", ДанныеОтвета.data.area_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_idКладр", ДанныеОтвета.data.area_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Город", ДанныеОтвета.data.city_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Город_idФИАС", ДанныеОтвета.data.city_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Город_idКладр", ДанныеОтвета.data.city_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Район_города", ДанныеОтвета.data.city_district_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_города_idФИАС", ДанныеОтвета.data.city_district_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_города_idКладр", ДанныеОтвета.data.city_district_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Нас_пункт", ДанныеОтвета.data.settlement_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Нас_пункт_idФИАС", ДанныеОтвета.data.settlement_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Нас_пункт_idКладр", ДанныеОтвета.data.settlement_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Улица", ДанныеОтвета.data.street_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Улица_idФИАС", ДанныеОтвета.data.street_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Улица_idКладр", ДанныеОтвета.data.street_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Дом", ДанныеОтвета.data.house, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Дом_тип", ДанныеОтвета.data.house_type_full, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Дом_idФИАС", ДанныеОтвета.data.house_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Дом_idКладр", ДанныеОтвета.data.house_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Блок", ДанныеОтвета.data.block, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("АбонентскийЯщик", ДанныеОтвета.data.postal_box, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Код_ОКАТО", ДанныеОтвета.data.okato, ДанныеАдреса);
	ВставитьСтрокуВструктуру("КОд_ОКТМО", ДанныеОтвета.data.oktmo, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("ИФНС_физЛица", ДанныеОтвета.data.tax_office, ДанныеАдреса);
	ВставитьСтрокуВструктуру("ИФНС_Организации", ДанныеОтвета.data.tax_office_legal, ДанныеАдреса);
	
	Возврат ДанныеАдреса;	
КонецФункции



&НаКлиенте
Функция СконвертироватьВремяUnixTS(UnixTime) 
	Возврат дата(1970,1,1,0,0,0) + unixtime/1000;
КонецФункции  

&НаКлиенте
Процедура ВставитьДатуВструктуру(Ключ, Дата, Структура)
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Структура.Вставить(Ключ, СконвертироватьВремяUnixTS(Дата));
	Иначе
		Структура.Вставить(Ключ, "не указано");
	КонецЕсли;
	
КОнецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокуВструктуру(Ключ, Строка, Структура)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Структура.Вставить(Ключ, Строка);
	Иначе
		Структура.Вставить(Ключ, "не указано");
	КонецЕсли;
	
КОнецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	
КонецПроцедуры // СообщитьПользователю()

&НаКлиенте
Функция ВывестиДанныеВТаблицуДанных(ДанныеКонтрагента)
	
	ДетальнаяИнформация.Очистить();
	
	Для каждого Элем из ДанныеКонтрагента Цикл
		
		НовСтр = ДетальнаяИнформация.Добавить();
		НовСтр.Реквизит = Элем.Ключ;
		НовСтр.Значение = Элем.Значение;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти
