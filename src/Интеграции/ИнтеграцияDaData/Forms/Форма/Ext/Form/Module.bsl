#Область ОписаниеПеременных

&НаКлиенте
Перем ДанныеПолученныеОтСервиса; // содержит данные ответа от сервиса DaData для вывода детализации на форму

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// тестовые данные
	Объект.Широта = "54.9189335";
	Объект.Долгота = "82.9517981";
	
	Сервер = "suggestions.dadata.ru";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатыПоиска

&НаКлиенте
Процедура РезультатыПоискаПриАктивизацииСтроки(Элемент)
	
	Данные = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если Данные = Неопределено ИЛИ ДанныеПолученныеОтСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Идентификатор) Тогда
		
		ДанныеКонтрагента = ДанныеПолученныеОтСервиса.Получить("" + Данные.НомерСтроки + Данные.Идентификатор);
		ВывестиДанныеВТаблицуДанных(ДанныеКонтрагента);	
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьОрганизацию(Команда)
	
	ПолучитьОрганизациюПоСтроке(Объект.СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОрганизациюПоИНН(Команда)
	
	ПолучитьОрганизациюПоСтроке(Объект.СтрокаПоиска, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьАдресПоСтроке(Команда)
	
	ДанныеПолученныеОтСервиса = Новый Соответствие;
	
	Данные = ПолучитьДаныеАдресаПоСтроке(Объект.СтрокаПоиска);
	ДанныеОтвета = ОбработатьОтветСервисаDaData(Данные);
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеАдреса = ПрочитатьОтветОтDaData(ДанныеОтвета);
	Если НайденныеАдреса.Количество() = 0 Тогда
		
		Текстсообщения = НСтр("ru='Не найдено адресов по введенной строке: %1!'");
		Текстсообщения = СтрШаблон(Текстсообщения, Объект.СтрокаПоиска);
		СообщитьПользователю(Текстсообщения);
		Возврат;
		
	Иначе
		
		Для каждого Адрес из НайденныеАдреса Цикл
			
			НовСтр = Объект.РезультатыПоиска.Добавить();
			ДанныеАдреса = РазобратьОтветПоискаАдреса(Адрес);
			ДанныеПолученныеОтСервиса.Вставить("" + НовСтр.НомерСтроки + ДанныеАдреса.Ид_ФИАС, ДанныеАдреса);
			НовСтр.Название = Адрес.value;
			НовСтр.Идентификатор = ДанныеАдреса.Ид_ФИАС;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАдресаПоГеокоординатам(Команда)
	
	ДанныеПолученныеОтСервиса = Новый Соответствие;
	
	Данные = ПолучитьДаныеАдресаПоГеокоординатам(Объект.Широта, Объект.Долгота);
	ДанныеОтвета = ОбработатьОтветСервисаDaData(Данные);
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеАдреса = ПрочитатьОтветОтDaData(ДанныеОтвета);
	Если НайденныеАдреса.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не найдено адресов по геокоординатам: широта - %1, долгота - %2!'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект.Широта, Объект.Долгота);
		СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	Иначе
		
		Для каждого Адрес Из НайденныеАдреса Цикл
			НовСтр = Объект.РезультатыПоиска.Добавить();
			ДанныеАдреса = РазобратьОтветПоискаАдреса(Адрес);
			ДанныеПолученныеОтСервиса.Вставить("" + НовСтр.НомерСтроки + ДанныеАдреса.Ид_ФИАС, ДанныеАдреса);
			НовСтр.Название = Адрес.value;
			НовСтр.Идентификатор = ДанныеАдреса.Ид_ФИАС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистику(Команда)
	
	лСервер = "dadata.ru";
	СтрокаЗапроса = "/api/v2/stat/daily?date=" + Формат(ПолучитьДатуСеанса(), "ДФ = гггг-ММ-дд");
	Результат = DaData_GET(СтрокаЗапроса, лСервер, Истина);
	
	Если Результат <> Неопределено Тогда
		
		СтатистикаИспользования = "";
		Данные = ПрочитатьОтветОтDaData (Результат.ПолучитьТелоКакСтроку(), "services");
		Для каждого Элем Из Данные Цикл
			СтатистикаИспользования = СтатистикаИспользования 
				+ ?(ЗначениеЗаполнено(СтатистикаИспользования), "; ", "") + Элем.Ключ + ": " + Элем.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Функция ОбработатьОтветСервисаDaData(Данные)
	
	КодУспешногоОтветаHTTP = 200;
	Если Данные.КодСостояния <> КодУспешногоОтветаHTTP Тогда
		
		ДанныеОтвета = Неопределено;
		Текстсообщения = НСтр("ru='Ошибка соединения с сервисом!'");
		СообщитьПользователю(Текстсообщения);
		
	Иначе
		
		ДанныеОтвета = Данные.ПолучитьТелоКакСтроку();
		Объект.РезультатыПоиска.Очистить();
		ДетальнаяИнформация.Очистить();
		
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции


#область Работа_с_сервисом_DaData

&НаКлиенте
Процедура ПолучитьОрганизациюПоСтроке(пСтрока, ЭтоИНН = Ложь)
	
	ДанныеПолученныеОтСервиса = Новый Соответствие;
	
	Данные = ПолучитьДаныеОрганизацийИзСервисаDaData(пСтрока, ЭтоИНН);
	ДанныеОтвета = ОбработатьОтветСервисаDaData(Данные);
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеКлиенты = ПрочитатьОтветОтDaData(ДанныеОтвета);
	Если НайденныеКлиенты.Количество() = 0 Тогда
		Текстсообщения = НСтр("ru='Не найдено клиента по %1!'");
		Если ЭтоИНН Тогда
			Текстсообщения = СтрШаблон(Текстсообщения, "указанному ИНН");
		Иначе
			Текстсообщения = СтрШаблон(Текстсообщения, "указанной строке");
		КонецЕсли;
		СообщитьПользователю(Текстсообщения);
		Возврат;
		
	Иначе
		
		Для каждого Контрагент из НайденныеКлиенты Цикл
			
			НовСтр = Объект.РезультатыПоиска.Добавить();
			ДанныеКонтрагента = РазобратьОтветПоискаОрганизации (Контрагент);
			ДанныеПолученныеОтСервиса.Вставить("" + НовСтр.НомерСтроки + ДанныеКонтрагента.Ид, ДанныеКонтрагента);
			ЗаполнитьЗначенияСвойств(НовСтр, ДанныеКонтрагента);
			НовСтр.Идентификатор = ДанныеКонтрагента.Ид;
			
			Если ДанныеКонтрагента.ПризнакГоловнойОрганизации Тогда
				ГоловнаяОрганизация = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		ДанныеКонтрагента = РазобратьОтветПоискаОрганизации (ГоловнаяОрганизация);
		
	КонецЕсли;
	
	ВывестиДанныеВТаблицуДанных(ДанныеКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДаныеАдресаПоГеокоординатам(Широта, Долгота) Экспорт
	
	СоответствиеДанные = Новый Соответствие;
	СоответствиеДанные.Вставить("lat", Широта);
	СоответствиеДанные.Вставить("lon", Долгота);
	СтрокаЗапроса = "/suggestions/api/4_1/rs/geolocate/address";
	Возврат DaData_POST(СтрокаЗапроса, СоответствиеДанные);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДаныеАдресаПоСтроке(Строка) Экспорт
	
	СоответствиеДанные = Новый Соответствие;
	СоответствиеДанные.Вставить("query", Строка);
	
	СтрокаЗапроса = "/suggestions/api/4_1/rs/suggest/address";
	
	Возврат DaData_POST(СтрокаЗапроса, СоответствиеДанные);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДаныеОрганизацийИзСервисаDaData(Строка, ЭтоИНН) Экспорт
	
	СоответствиеДанные = Новый Соответствие;
	СоответствиеДанные.Вставить("query", Строка);
	
	Если ЭтоИНН Тогда
		СтрокаЗапроса = "/suggestions/api/4_1/rs/findById/party";
	Иначе
		СтрокаЗапроса = "/suggestions/api/4_1/rs/suggest/party";
	КонецЕсли;
	Возврат DaData_POST(СтрокаЗапроса, СоответствиеДанные);
	
КонецФункции


&НаКлиенте
Функция DaData_GET(СтрокаЗапроса, пСервер, флВставитьСекретныйКлюч = Истина)
	
	лСервер = "dadata.ru";
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(пСервер,,,,,20,ssl1);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Token " + Токен);
	Если флВставитьСекретныйКлюч Тогда
		Заголовки.Вставить("X-Secret", СекретныйТокен);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	
	Попытка
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		Текстсообщения = НСтр("ru='Произошла сетевая ошибка!'");
		СообщитьПользователю(Текстсообщения);
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
 КонецФункции

&НаКлиенте
Функция DaData_POST(СтрокаЗапроса, СоответствиеДанные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СоответствиеДанные);
	
	СтрокаДанные = ЗаписьJSON.Закрыть();
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,90,ssl1);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Accept", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Token " + Токен);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаДанные, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	Попытка
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Текстсообщения = НСтр("ru='Произошла сетевая ошибка!'");
		СообщитьПользователю(Текстсообщения);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьОтветОтDaData (ТекстовыеДанныеОтвета, ИмяОтвета="suggestions")
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстовыеДанныеОтвета);
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	СписокЗапросов = Новый Структура;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЧтениеJSON.Закрыть();
		СписокЗапросов = Результат[ИмяОтвета];
		
	КонецЕсли;
	
	Возврат СписокЗапросов;
	
КонецФункции

#КонецОбласти // Работа_с_сервисом_DaData

// Пребораразует данные адреса, полученные от сервиса в служебную структуру
// актуальный формат ответа сервиса можно увидеть по ссылке: https://dadata.ru/api/find-party/
//
// Параметры:
//  ДанныеОтвета  - Структура - ответ от сервиса DaData с данными по организации
//
// Возвращаемое значение:
//   Структура   - служебная структура с данными адреса, преборазованная для более удобного для глаза вида
&НаКлиенте
Функция РазобратьОтветПоискаОрганизации (ДанныеОтвета)
	ДанныеКонтрагента = Новый Структура;

	ВставитьСтрокуВструктуру("Название", ДанныеОтвета.value, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("АдресОрганизации", ДанныеОтвета.data.address.value, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("АдресОрганизацииЕГРЮЛ", ДанныеОтвета.data.address.data.source, ДанныеКонтрагента);

	ВставитьСтрокуВструктуру("Широта", ДанныеОтвета.data.address.data.geo_lat, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("Долгота", ДанныеОтвета.data.address.data.geo_lon, ДанныеКонтрагента);

	Если ДанныеОтвета.data.Свойство("branch_count") Тогда
		ВставитьСтрокуВструктуру("КоличествоФиллиалов", ДанныеОтвета.data.branch_count, ДанныеКонтрагента);
	КонецЕсли;
	
	Если ДанныеОтвета.data.Свойство("branch_type") Тогда
		ВставитьСтрокуВструктуру("ПризнакГоловнойОрганизации", ДанныеОтвета.data.branch_type, ДанныеКонтрагента);
		Если ДанныеКонтрагента.ПризнакГоловнойОрганизации = "MAIN" Тогда
			ДанныеКонтрагента.ПризнакГоловнойОрганизации = Истина;
		Иначе
			ДанныеКонтрагента.ПризнакГоловнойОрганизации = Ложь;
		КонецЕсли;		 
	ИНаче
		ВставитьСтрокуВструктуру("ПризнакГоловнойОрганизации", Истина, ДанныеКонтрагента);
		
	КонецЕсли;
	
	ВставитьСтрокуВструктуру("ИНН", ДанныеОтвета.data.inn, ДанныеКонтрагента);
	Если ДанныеОтвета.data.Свойство("kpp") Тогда
		ВставитьСтрокуВструктуру("КПП", ДанныеОтвета.data.kpp, ДанныеКонтрагента);
	КонецЕсли;
	ВставитьСтрокуВструктуру("ОГРН", ДанныеОтвета.data.ogrn, ДанныеКонтрагента);
	ВставитьДатуВструктуру("Дата_выдачи_ОГРН", ДанныеОтвета.data.ogrn_date, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("ИД", ДанныеОтвета.data.hid, ДанныеКонтрагента);
	Если ДанныеОтвета.data.Свойство("management") И ЗначениеЗаполнено(ДанныеОтвета.data.management) Тогда
		ВставитьСтрокуВструктуру("Руководитель_ФИО", ДанныеОтвета.data.management.name, ДанныеКонтрагента);
		ВставитьСтрокуВструктуру("Руководитель_Должность", ДанныеОтвета.data.management.post, ДанныеКонтрагента);
	КонецЕсли;

	ВставитьСтрокуВструктуру("ПолноеНаименование", ДанныеОтвета.data.name.full_with_opf, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("КраткоеНаименование", ДанныеОтвета.data.name.short_with_opf, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("ОКВЭД", ДанныеОтвета.data.okved, ДанныеКонтрагента);
	ВставитьСтрокуВструктуру("Версия_ОКВЭД", ДанныеОтвета.data.okved_type, ДанныеКонтрагента);

	ВставитьДатуВструктуру("Дата_актуальности_сведений", ДанныеОтвета.data.state.actuality_date, ДанныеКонтрагента);
	ВставитьДатуВструктуру("Дата_регистрации", ДанныеОтвета.data.state.registration_date, ДанныеКонтрагента);
	ВставитьДатуВструктуру("Дата_ликвидации", ДанныеОтвета.data.state.liquidation_date, ДанныеКонтрагента);
	
	ТекСтатус = ОбработатьСтатусОрганизациии(ДанныеОтвета.data.state.status);
	ВставитьСтрокуВструктуру("СтатусОрганизации", ТекСтатус, ДанныеКонтрагента);
	
	Если ДанныеОтвета.data.type = "LEGAL" Тогда
		ТипОрганизации = "юридическое лицо";
	ИначеЕсли ДанныеОтвета.data.type = "INDIVIDUAL" Тогда
		ТипОрганизации = "индивидуальный предприниматель";
	Иначе
		ТипОрганизации = ДанныеОтвета.data.type;
		
	КонецЕсли;
	ВставитьСтрокуВструктуру("ТипОрганизации", ТипОрганизации, ДанныеКонтрагента);
	
	Возврат ДанныеКонтрагента;

КонецФункции

&НаКлиенте
Функция ОбработатьСтатусОрганизациии(СтатусВСервисе)

	ДанныеСтатусов = Новый Соответствие;
	ДанныеСтатусов.Вставить("ACTIVE", "действующая");
	ДанныеСтатусов.Вставить("LIQUIDATING", "ликвидируется");
	ДанныеСтатусов.Вставить("LIQUIDATED", "ликвидирована");
	ДанныеСтатусов.Вставить("REORGANIZING", "в процессе присоединения к другому юрлицу");

	ТекСтатус = ДанныеСтатусов.Получить(СтатусВСервисе);
	Если ТекСтатус = Неопределено Тогда
		ТекСтатус = СтатусВСервисе;
	КонецЕсли;


	Возврат ТекСтатус;

КонецФункции

// Пребораразует данные адреса, полученные от сервиса в служебную структуру
// актуальный формат ответа сервиса можно увидеть по ссылке: https://dadata.ru/api/suggest/address/
//
// Параметры:
//  ДанныеОтвета  - Структура - ответ от сервиса DaData с данными по организации
//
// Возвращаемое значение:
//   Структура   - служебная структура с данными адреса, преборазованная для более удобного для глаза вида
&НаКлиенте
Функция РазобратьОтветПоискаАдреса (ДанныеОтвета)
	
	ДанныеАдреса = Новый Структура;
	
	// 	Базовые поля, заполняются для всех тарифов
	ВставитьСтрокуВструктуру("Адрес", ДанныеОтвета.value, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Ид_ФИАС", ДанныеОтвета.data.fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Ид_Кладр", ДанныеОтвета.data.kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Индекс", ДанныеОтвета.data.postal_code, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Страна", ДанныеОтвета.data.country, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Страна_ISO_код", ДанныеОтвета.data.country_iso_code, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Регион", ДанныеОтвета.data.region_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Регион_idФИАС", ДанныеОтвета.data.region_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Регион_idКладр", ДанныеОтвета.data.region_kladr_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Регион_ISO_код", ДанныеОтвета.data.region_iso_code, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Район", ДанныеОтвета.data.area_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_idФИАС", ДанныеОтвета.data.area_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_idКладр", ДанныеОтвета.data.area_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Город", ДанныеОтвета.data.city_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Город_idФИАС", ДанныеОтвета.data.city_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Город_idКладр", ДанныеОтвета.data.city_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Район_города", ДанныеОтвета.data.city_district_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_города_idФИАС", ДанныеОтвета.data.city_district_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Район_города_idКладр", ДанныеОтвета.data.city_district_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Нас_пункт", ДанныеОтвета.data.settlement_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Нас_пункт_idФИАС", ДанныеОтвета.data.settlement_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Нас_пункт_idКладр", ДанныеОтвета.data.settlement_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Улица", ДанныеОтвета.data.street_with_type, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Улица_idФИАС", ДанныеОтвета.data.street_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Улица_idКладр", ДанныеОтвета.data.street_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Дом", ДанныеОтвета.data.house, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Дом_тип", ДанныеОтвета.data.house_type_full, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Дом_idФИАС", ДанныеОтвета.data.house_fias_id, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Дом_idКладр", ДанныеОтвета.data.house_kladr_id, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("Блок", ДанныеОтвета.data.block, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("АбонентскийЯщик", ДанныеОтвета.data.postal_box, ДанныеАдреса);
	ВставитьСтрокуВструктуру("Код_ОКАТО", ДанныеОтвета.data.okato, ДанныеАдреса);
	ВставитьСтрокуВструктуру("КОд_ОКТМО", ДанныеОтвета.data.oktmo, ДанныеАдреса);
	
	ВставитьСтрокуВструктуру("ИФНС_физЛица", ДанныеОтвета.data.tax_office, ДанныеАдреса);
	ВставитьСтрокуВструктуру("ИФНС_Организации", ДанныеОтвета.data.tax_office_legal, ДанныеАдреса);
	
	Возврат ДанныеАдреса;	
КонецФункции

&НаКлиенте
Функция СконвертироватьВремяUnixTS(UnixTime) 
	
	Возврат дата(1970,1,1,0,0,0) + unixtime/1000; // стандартная конвертации Время Unix
	
КонецФункции 

&НаКлиенте
Процедура ВставитьДатуВструктуру(Ключ, Дата, Структура)
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Структура.Вставить(Ключ, СконвертироватьВремяUnixTS(Дата));
	Иначе
		Структура.Вставить(Ключ, "не указано");
	КонецЕсли;
	
КОнецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокуВструктуру(Ключ, Строка, Структура)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Структура.Вставить(Ключ, Строка);
	Иначе
		Структура.Вставить(Ключ, "не указано");
	КонецЕсли;
	
КОнецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	
КонецПроцедуры // СообщитьПользователю()

&НаКлиенте
Процедура ВывестиДанныеВТаблицуДанных(ДанныеКонтрагента)
	
	ДетальнаяИнформация.Очистить();
	
	Для каждого Элем из ДанныеКонтрагента Цикл
		
		НовСтр = ДетальнаяИнформация.Добавить();
		НовСтр.Реквизит = Элем.Ключ;
		НовСтр.Значение = Элем.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
