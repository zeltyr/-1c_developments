
&НаКлиенте
Процедура ПолучитьСообщениеНаКлиенте()

	ИмяОчереди = "registration";
	ОтправляемоеСообщение = "Test";
	ОтветноеСообщение = "";
	ТегСообщения = 0;
	
	Попытка
		Клиент  = Новый("AddIn.RabbitMQ.PinkRabbitMQ");
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить из макета PinkRabbitMQ";
		Сообщение.Сообщить();
		Возврат;
		
	КонецПопытки;
	
	Клиент.Connect("localhost", 5672, "guest", "guest", "/");
	
	МассивИмен = Новый Массив;
	ДанныеТелеграм = Новый Соответствие;
	Попытка
		Потребитель = Клиент.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		Пока Клиент.BasicConsumeMessage("", ОтветноеСообщение, ТегСообщения, 5000) Цикл
			Клиент.BasicAck(ТегСообщения);
			Данные = ПреборазоватьJSONвСоответствие(ОтветноеСообщение);
			Если Данные.Получить("fio") <> Неопределено Тогда
				МассивИмен.Добавить(Данные.Получить("fio"));
				ДанныеТелеграм.Вставить(Данные.Получить("fio"), Данные.Получить("_telegram_id"));
			КонецЕсли;
			Сообщить("Успешно! Из очереди прочитано сообщение " + ОтветноеСообщение);
			ОтветноеСообщение = ""; // Обнуляем, чтобы избежать утечку памяти
			ТегСообщения = 0; // Обнуляем, чтобы избежать утечку памяти
		КонецЦикла;
		Клиент.BasicCancel("");
	Исключение
		Сообщить(Клиент.GetLastError());
	КонецПопытки;
	
	
	ОбновитьФизЛицНаСервере(МассивИмен, ДанныеТелеграм);
	
	Клиент = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьФизЛицНаСервере(МассивИмен, ДанныеТелеграм)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование В(&МассивИмен)";
	
	Запрос.УстановитьПараметр("МассивИмен", МассивИмен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДанныеОбъект.ИдТелеграм = Формат(ДанныеТелеграм.Получить(ВыборкаДетальныеЗаписи.Наименование), "ЧГ=");	
		ДанныеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьСообщениеНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица1.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица.Изменения КАК ФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица1
		|		ПО ФизическиеЛица.Ссылка = ФизическиеЛица1.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивJSON = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МояСтруктура = Новый Структура;
		МояСтруктура.Вставить("fio", СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
		СтрокаLSON = СформироватьJSON(МояСтруктура, Ложь);
		
		МассивJSON.Добавить(СтрокаLSON);
		
	КонецЦикла;

	// todo добавить очистку узла от ссылок физических лиц
	
	Возврат МассивJSON;
	
КонецФункции

&НаСервереБезКонтекста
// преборазует входящую структуру в JSON
// экранирует не ASCII символы, для отключения поправить параметры записи
//
// ПАРАМЕТРЫ:
// ВходящиеДанные - Структура
//	Ключ - строка
//	Значение - Строка, Число, Дата, Булево, Массив, Структура -
// 		любое серилизуемое в JSON значение
// ФорматироватьJSON - БУЛЕВО - если нужно сформировать JSON для вывода в форматированном виде
//
// Возвращаемое значение:
// 	Строка - сформированный JSON
//
Функция СформироватьJSON(ВходящиеДанные, ФорматироватьJSON = Ложь)
	
	Если ФорматироватьJSON Тогда
		СимволФорматирования = Символы.Таб;
	Иначе
		СимволФорматирования = Неопределено;	
	КонецЕсли;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ВходящиеДанные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции // СформироватьJSON()

Функция ПреборазоватьJSONвСоответствие(ОтветноеСообщение)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ОтветноеСообщение);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеJSON;
	
КонецФункции


&НаКлиенте
Процедура ОтправитьСообщениеНаКлиенте()

	ИмяОчереди = "hello";
	ОтправляемоеСообщение = "Test";
	ОтветноеСообщение = "";
	ТегСообщения = 0;
	
	Попытка
		Клиент  = Новый("AddIn.RabbitMQ.PinkRabbitMQ");
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить из макета PinkRabbitMQ";
		Сообщение.Сообщить();
		Возврат;
		
	КонецПопытки;
	
	ИмяОчереди = "fio";
	МассивJSON = ОтправитьСообщениеНаСервере();
	
	Клиент.Connect("localhost", 5672, "guest", "guest", "/");
	Для каждого ОтправляемоеСообщение ИЗ МассивJSON Цикл
		Клиент.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		Клиент.BasicPublish("", ИмяОчереди, ОтправляемоеСообщение, 0, Ложь);
	КонецЦикла;

	Клиент = Неопределено;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПодключитьКомпонентуPinkRabbitMQ(ДопПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
            "ПослеПодключенияВнешнейКомпоненты",
            ЭтотОбъект,
            ДопПараметры);
		
	НачатьПодключениеВнешнейКомпоненты(
       ОписаниеОповещения,
       "ОбщийМакет.PinkRabbitMQ",
       "RabbitMQ");
	   
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияВнешнейКомпоненты(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		
		Клиент  = Новый("AddIn.RabbitMQ.PinkRabbitMQ");
		Если ДопПараметры.Свойство("Отправить") Тогда
			ОтправитьСообщениеНаКлиенте();
		Иначе
			ПолучитьСообщениеНаКлиенте();
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ДопПараметры.УстановитьЕслиНеПодключено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеПодключенияВнешнейКомпоненты",
			ЭтотОбъект,
			Ложь);
		
		НачатьУстановкуВнешнейКомпоненты(
			ОписаниеОповещения,
			"ОбщийМакет.PinkRabbitMQ");
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключить компоненту PinkRabbitMQ";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщение(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УстановитьЕслиНеПодключено", Истина);
	ПодключитьКомпонентуPinkRabbitMQ(ДопПараметры);
	//ПолучитьСообщениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПользователей(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УстановитьЕслиНеПодключено", Истина);
	ДопПараметры.Вставить("Отправить", Истина);

	ПодключитьКомпонентуPinkRabbitMQ(ДопПараметры);
	//ПолучитьСообщениеНаКлиенте();
КонецПроцедуры
