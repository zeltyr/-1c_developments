{1,
{6,
{"Шаблоны кода",1,0,"",""},
{6,
{"Комментарии (устаревшее)",1,0,"",""},
{0,
{"Начало комментария (нКом)",0,1,"нКом","//НВСА - начало <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">
"}
},
{0,
{"Начало комментария (Комн)",0,1,"Комн","//НВСА - начало <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">
"}
},
{0,
{"Конец комментария (кКом)",0,1,"кКом","//КВСА - конец <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">"}
},
{0,
{"Конец комментария (Комк)",0,1,"Комк","//КВСА - конец <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">"}
},
{0,
{"Полный комментарий (пКом)",0,1,"пКом","//НВСА - начало <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">

//КВСА - конец <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">"}
},
{0,
{"Полный комментарий (Комп)",0,1,"комп","//НВСА - начало <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">

//КВСА - конец <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy_hh:mm"">"}
}
},
{3,
{"Препроцессоры",1,0,"",""},
{0,
{"ТолстыйКлиентОбычноеПриложение",0,1,"ТолстыйКлиентОбычноеПриложение","#Если ТолстыйКлиентОбычноеПриложение Тогда

	
	
#КонецЕсли	
"}
},
{0,
{"ТолстыйКлиентУправляемоеПриложение",0,1,"ТолстыйКлиентУправляемоеПриложение","#Если ТолстыйКлиентУправляемоеПриложение Тогда

	
	
#КонецЕсли	
"}
},
{0,
{"ТолстыйКлиентОбычноеИУправляемое",0,1,"ТолстыйКлиентОбычноеИУправляемое","#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда

	
	
#КонецЕсли	
"}
}
},
{6,
{"СтандартыОформления",1,0,"",""},
{0,
{"Переменная",0,1,"Перем","Перем <?""Введите имя переменной"">; // <?""Введите описание переменной"">"}
},
{0,
{"Модуль общий",0,1,"МодульОбщ[ий]","////////////////////////////////////////////////////////////////////////////////
// Заголовок модуля представляет собой комментарий в самом начале модуля. 
// В заголовке модуля приводится его краткое описание и условия применения.
// Для модулей форм в заголовке рекомендуется размещать описание параметров формы.
//
// Н-р: Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

 // содержит экспортные процедуры и функции, предназначенные для использования другими объектами конфигурации 
 // или другими программами (например, через внешнее соединение).



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. 
// В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать 
// только из других функциональных подсистем этой же библиотеки.



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. 
// В тех случаях, когда общий модуль является частью некоторой функциональной подсистемы, 
// включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные 
// экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы.
// 
// Для объемных общих модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти


#КонецОбласти"}
},
{0,
{"Модуль формы",0,1,"МодульФ[ормы]","////////////////////////////////////////////////////////////////////////////////
// Заголовок модуля представляет собой комментарий в самом начале модуля. 
// В заголовке модуля приводится его краткое описание и условия применения.
// Для модулей форм в заголовке рекомендуется размещать описание параметров формы.
//
// Н-р: Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Раздел «Обработчики событий формы» содержит процедуры-обработчики событий формы: ПриСозданииНаСервере, ПриОткрытии и т.п. 


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Раздел «Обработчики событий элементов шапки формы» содержит процедуры-обработчики элементов, 
// расположенных в основной части формы (все, что не связано с таблицами на форме). 


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>

// В разделах «Обработчики событий элементов таблицы формы <имя таблицы формы>» 
// размещаются процедуры-обработчики таблиц формы и элементов таблиц. 
// Для процедур-обработчиков каждой таблицы должен быть создан свой раздел. 


#КонецОбласти

#Область ОбработчикиКомандФормы

// Раздел «Обработчики команд формы» содержит процедуры-обработчики команд формы 
// (имена которых задаются в свойстве Действие команд формы). 


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию модуля формы. 
// 
// Для объемных модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти



#КонецОбласти"}
},
{0,
{"Модуль объекта",0,1,"МодульОбъ[екта]","////////////////////////////////////////////////////////////////////////////////
// Заголовок модуля представляет собой комментарий в самом начале модуля. 
// В заголовке модуля приводится его краткое описание и условия применения.
// Для модулей форм в заголовке рекомендуется размещать описание параметров формы.
//
// Н-р: Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОписаниеПеременных



#КонецОбласти

#Область ПрограммныйИнтерфейс

// Раздел «Программный интерфейс» содержит экспортные процедуры и функции, предназначенные для использования 
// в других модулях конфигурации или другими программами (например, через внешнее соединение). 
// Не следует в этот раздел помещать экспортные функции и процедуры, которые предназначены для вызова 
// исключительно из модулей самого объекта, его форм и команд. 
//
// Например, процедуры заполнения табличной части документа, которые вызываются из обработки заполнения в модуле объекта 
// и из формы документа в обработчике команды формы не являются программным интерфейсом модуля объекта, 
// т.к. вызываются только в самом модуле и из форм этого же объекта. 
// Их следует размещать в разделе «Служебные процедуры и функции». 


#КонецОбласти

#Область ОбработчикиСобытий

// Раздел «Обработчики событий» содержит обработчики событий модуля объекта (ПриЗаписи, ПриПроведении и др.) 


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Раздел «Служебный программный интерфейс» имеет такое же предназначение, как и в общих модулях. 
// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. 
// В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать 
// только из других функциональных подсистем этой же библиотеки.


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию модуля объекта. 
// В тех случаях, когда модуль объекта является частью некоторой функциональной подсистемы, 
// включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные 
// экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы.
// 
// Для объемных модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти



#КонецОбласти

#Область Инициализация

#КонецОбласти"}
},
{0,
{"Модуль команды",0,0,"","#Область ПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"Область",0,1,"Обла[сть]","#Область <?""Введите имя области"">



#КонецОбласти //<?""Введите имя области"">"}
}
},
{4,
{"Полезные мелочи",1,0,"",""},
{0,
{"Регистрация ссылки в узел обмена",0,0,"","Процедура РегистрацияИзФайла(СсылкаНаДокумент)
	
	лОрганизация = Справочники.ПредопределенныеЭлементы.Орг_Геба;
	лУзелОбмена  = ВыбратьУзелОбмена (Организация);
	
	Если ЗначениеЗаполнено(лУзелОбмена) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(лУзелОбмена, Рез.СсылкаНаДокумент);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьУзелОбмена (Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	РегистрацияНестлеОрганизации.Ссылка
	|ИЗ
	|	ПланОбмена.РегистрацияНестле.Организации КАК РегистрацияНестлеОрганизации
	|ГДЕ
	|	РегистрацияНестлеОрганизации.Организация = &Организация"";
	Запрос.УстановитьПараметр(""Организация"", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		УзелОбмена = Выборка.Ссылка;
	Иначе
		УзелОбмена = ПланыОбмена.РегистрацияНестле.ПустаяСсылка();
	КонецЕсли;
	
	Возврат УзелОбмена;
	
КонецФункции
"}
},
{0,
{"Цикл с оповещением",0,1,"Цикл[Оповещение]","	Обработано = 0;
	ВсегоОбработать    = <?""Введите имя табличной части"">.Количество();
	ШагВыводаСообщения = Число(<?""Введите имя шага вывода сообщения"">);
	
	Для каждого СтрокаТЧ из <?""Введите имя табличной части""> Цикл
		
		#Если НаКлиенте Тогда 
			ОбработкаПрерыванияПользователя(); 
			
			лПризнакВыводаСообщения = Обработано / ШагВыводаСообщения;
			Если лПризнакВыводаСообщения = Цел(лПризнакВыводаСообщения) Тогда
				Процент = 100 * лПризнакВыводаСообщения; 
				лТекстДляВывода = Формат(ТекущаяДата(), ""ДЛФ = ДВ"") + "" - таблица '"" + <?""Введите имя табличной части""> + ""', обработано("" + Процент + ""%): "" + Обработано + "" из "" + ВсегоОбработать;
				Сообщить(лТекстДляВывода);
				Состояние(лТекстДляВывода);
			КонецЕсли;
			
			Обработано = Обработано + 1;
			
		#КонецЕсли
		
		
	КонецЦикла
"}
},
{0,
{"ПодсказкаПоОбъектуМетаданных",0,1,"[подсказ]ка","Если ЛОЖЬ Тогда //ПОТОМ УДАЛИТЬ
	//сюда можно вставить любой свой объект метаданных, по которому вам нужная подсказка
	Док = Документы.ЗаказПокупателя.СоздатьДокумент();
КонецЕсли;"}
},
{0,
{"ПараметрыОтбора",0,0,"[ПараметрыО]тбора","ПараметрыОтбора = Новый Структура;
ПараметрыОтбора.Вставить(""НазваниеОтбора"", Отбор);
"}
}
},
{5,
{"Работа с файлами",1,0,"",""},
{0,
{"Выбрать каталог",0,1,"ВыбратьКат[алог]","//Выбор каталога файлов
Процедура КаталогФайловНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытия                    = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытия.Каталог            = """";
	ДиалогОткрытия.МножественныйВыбор = Ложь;
	ДиалогОткрытия.Заголовок          = ""Выберите каталог"";
	
	Если ДиалогОткрытия.Выбрать() Тогда
		КаталогФайлов = ДиалогОткрытия.Каталог;
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"Выбрать файл",0,1,"ВыбратьФ[айл]","Процедура ФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Режим          = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогОткрытия.ПолноеИмяФайла     = """";
	
	//фильтр на типы файлов, если необходимо
	//Фильтр                          = ""файлы Excel, *.xlsx|*.xlsx""; 
	//ДиалогОткрытия.Фильтр           = Фильтр;
	
	ДиалогОткрытия.МножественныйВыбор = Ложь;
	ДиалогОткрытия.Заголовок          = ""Выберите файл"";
	
	Если ДиалогОткрытия.Выбрать() Тогда
		ФайлШаблона = ДиалогОткрытия.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"Выбрать открытый файл Excel",0,1,"ВыбратьОтк[рытыйФайлЭксель]","Функция ВыбратьОткрытыйФайлЭксель ()
	
	Попытка
		Эксель = ПолучитьCOMОбъект(,""Excel.Application""); 
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат; 
	КонецПопытки;
	
	Попытка 
		Книга = Эксель.ActiveWorkbook;
	Исключение 
		Сообщить(""Не найдена открытая книга""); 
		Эксель.DisplayAlerts = False; 
		Эксель.Application.Quit(); 
		Возврат; 
	КонецПопытки;
	
	Возврат Книга.ActiveSheet;
	
КонецФункции

"}
},
{0,
{"Перебор строк текстового файла",0,1,"ПеребратьСтр[окиТекстовогоФайла]","//Выполняет чтение текстового файла и перебор его строк
//
//ПАРАМЕТРЫ:
//ПутьКФайлу - Строка - содержит полный путь к файлу, который мы будем обходить
Процедура <?""Введите имя функции"">(ПутьКФайлу)
	
	СтрДок = Неопределено;
	//читаем файл и первую строку
	Попытка
		Док    = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.ANSI);
		СтрДок = Док.ПрочитатьСтроку(); 
	Исключение
	КонецПопытки;
	
	Пока СтрДок <> Неопределено Цикл // строки читаются до символа перевода строки
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ОбработатьДанныеСтроки(СтрДок);
		
		//переход на следующую строку
		СтрДок = Док.ПрочитатьСтроку();
	КонецЦикла;
	
	Док.Закрыть();
	
КонецПроцедуры

//содержит обработчик строки
//
//ПАРАМЕТРЫ:
//СтрокаДанныхДокумента - Строка - строка, которую мы будем разбирать
Процедура ОработатьДанныеСтроки(ЗНАЧ СтрокаДанныхДокумента)
	//обработчик строки
КонецПроцедуры
"}
},
{0,
{"Разбор файла",0,0,"","&НаСервере
Процедура ЗагрузитьФайл (ТекстФайла)
	
	КолСтрок 		= ТекстФайла.КоличествоСтрок();
	
	Для к = 1 по КолСтрок Цикл 
		Стр = ТекстФайла.ПолучитьСтроку(к);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайл (ПутьКФайлу)
	ИмяФайла 	= Новый Файл(ПутьКФайлу);
	ТекстФайла 	= Новый ТекстовыйДокумент();
	
	ТекстФайла.Прочитать(ПутьКФайлу);
	ЗагрузитьФайл(ТекстФайла);
КонецПроцедуры
//КВСА
"}
}
},
{3,
{"Работа с формами",1,0,"",""},
{0,
{"Открыть форму списка (с отбором)",0,0,"","Процедура ОсновныеДействияФормыКомплектация(Кнопка)
	Форма = Документы.КомплектацияНоменклатуры.ПолучитьФормуСписка();
	Форма.Отбор.ДокументыПоЗаказуПокупателя.ВидСравнения  = ВидСравнения.Равно;
	Форма.Отбор.ДокументыПоЗаказуПокупателя.Значение      = Ссылка;
	Форма.Отбор.ДокументыПоЗаказуПокупателя.Использование = Истина;
	Форма.Открыть();
КонецПроцедуры
"}
},
{0,
{"Записать документ через форму",0,0,"","Процедура ЗаписатьЧерезФорму (Ссылка)
	Попытка
		Форма = Ссылка.ПолучитьФорму(, Ссылка);
		Форма.ЗаписатьВФорме();
	Исключение
		Сообщить(""Не удалось записать/провести: "" + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры"}
},
{0,
{"Открыть форму выбора (с отбором)",0,0,"","Процедура ВладелецНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма=Справочники.Номенклатура.ПолучитьФормуВыбора();
	Форма.Заголовок = ""Выбор номенклатуры ..."";
	
	//установка отбора
	Форма.Отбор.<?""Введите имя параметра отбора"">.Использование = Истина;
	Форма.Отбор.<?""Введите имя параметра отбора"">.ВидСравнения  = ВидСравнения.ВСписке;
	Форма.Отбор.<?""Введите имя параметра отбора"">.Значение      = Справочники.Номенклатура.ПустаяСсылка();
	//
	// отключение иерархического просмотра по необходимости
	//	Форма.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = ложь;
	
	ВыбранноеЗначение=Форма.ОткрытьМодально();
КонецПроцедуры
т"}
}
}
}
}