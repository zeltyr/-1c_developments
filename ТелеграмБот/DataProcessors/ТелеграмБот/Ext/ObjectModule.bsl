#Область Описание_Оработки
////////////////////////////////////////////////////////////////////////////////
// Обработка отвечает за работу с телеграм-ботом, который может использоваться для самых разных заданий
//ВАЖНО ПОНИМАТЬ, что данная обработка предоставляет всего лишь транспорт по обмену сообщениями
//Тут важны 2 справочника: "Данные ботов" - содержит список ботов, которые заведены в системе
//	делаем их предопределёнными чтобы проще потом вызывать в коде
//
//Справочник "Команды ботов", по сути, содержит все необходимые нам алгоритмы, которые мы вызываем
//Т.е. каждое полученное сообщение проверяется по этому справочнику и если найдено сообщения - подтягивается прописанный алгоритм, если нет - возвращается стандартный текст.

//Регистр "Собщения телеграм" содержит историю сообщений и позволяет не обрабатывать одно и тоже сообщение дважды.
//плюс в этот регистр пишутся все сообщения для отправки, см. стандартную команду "ОтправитьСообщения"

// Общая информация
// Телеграм-бот не умеет устраивать рассылку по базе пользователей, по номеру телефона или по чему-то ещё.
// Для того, чтобы пользователь начал получать сообщения от телеграм бота, необходимо получить "chat_id", который 
// присваивается пользователю в тот момент, когда пользователь САМ начинает диалог с телеграм-ботом
// Поэтому, для того, чтобы наши пользователи могли нормально получать сообщения от наших ботов, им необходимо будет пройти
// процедуру регистрации, которая заключается в записи chat_id пользователя, в регистр "Контактная информация" (подробнее см. процудуру регистрации)

//ВАЖНЫЙ МОМЕНТ по коду!
//Я постарался все постоянные значения, которые используются в телеграм-боте собрать в отдельной области, которая называется 
//"Програмные_Перечисления"; находится в области "Служебные_Процедуры_и_Функции";
//Эти перечисления содержат неизменяемые значения, такие как:
// - сообщения телеграм-бота;
// - данные для подключения к боту;
// - список доступных команд бота;
// - и т.д.
//При дальнейшем развитии эти перечисления могут быть заменены на регистры или справочники, для того, чтобы 
//не влезать в код тогда, когда возник необходимость что-то поправить, либо когда ботов потребуется больше одного

//Область "Работа_с_Сервером_Телеграм" - содержит процедуры для взаимодействия с сервером телеграм, а именно
// - отправка сообщений
// - соединение с сервером 
// и т.д.

//ПОЛЕЗНЫЕ ССЫЛКИ:
//---------------------------------------
//1С и Телеграм-Бот (расположены по важности изучения):
//https://infostart.ru/public/667516/ - Telegram-боты
//https://infostart.ru/public/419846/ - Пример связи 1С и мессенджера Telegram. Получение данных из 1С запросом из Telegram
//https://infostart.ru/public/372352/ - Бот для Telegram (Платформа 1С 8.3.6+)
//---------------------------------------
//Программные перечисления для 1С:
//https://infostart.ru/public/566908/
//---------------------------------------
//Стандартная документация по api телеграм
//https://core.telegram.org/bots/api
////////////////////////////////////////////////////////////////////////////////
#КонецОбласти //Описание_Оработки

#Область Описание_Переменных

Перем мСтруктураКэшДанных; //структура; хранит уже созданные системные перечисления, защищает от постоянного пересоздания этих перечислений

#КонецОбласти //Описание_Переменных

#Область Работа_с_Сервером_Телеграм

//sendMessage

//Use this method to send text messages. On success, the sent Message is returned.
//Parameters 	Type 	Required 	Description
//chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)
//text 	String 	Yes 	Text of the message to be sent
//parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.
//disable_web_page_preview 	Boolean 	Optional 	Disables link previews for links in this message
//disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.
//reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message
//reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.


//РАБОТА С КЛАВИАТУРОЙ
//Клавиатура в телеграм-боте может работать в 2х режимах:
//Клавиатура чата (ReplyKeyboardMarkup) - эти клавиатуры заменяют обычные текстовые устройства ввода на телефонах и отображаются под полем для ввода сообщения. 
//		Что происходит, когда мы нажимаем кнопки под полем для ввода сообщения? 
//		Ничего сложного — лишь отправляется тот текст, который мы видим на кнопке. 
//		То есть нажатие на кнопку "Настройки", например, приведёт к отправке сообщения с текстом "Настройки" от твоего имени к боту и только.
//		подробности см.  https://core.telegram.org/bots/api/#replykeyboardmarkup

//Клавиатура сообщения (InlineKeyboardMarkup), инлайн-кнопки -  Что это такое? 
//		Это специальные объекты, которые "цепляются" к конкретным сообщениям и распространяют своё действие, в общем случае, только на них. 
//		Делятся такие кнопки на три типа: URL-кнопки, Callback-кнопки и Switch-кнопки.
//		подробности см.  https://core.telegram.org/bots/api/#inlinekeyboardmarkup


//ОПИСАНИЕ - Клавиатура чата (ReplyKeyboardMarkup)
//keyboard           - Массив - Массив данных о кнопках, каждый элемент которого представляет собой массив данных о конкретной кнопке (KeyboardButton)
//resize_keyboard    - Булево - Опциональная! Задаёт необходимость авторазмера для кнопок клавиатуры. Значение по-уполчанию: ЛОЖЬ, т.е. размер кнопок будет соответствовать размеру стандартной клавиатуры
//one_time_keyboard  - Булево - Опциональная! Если задана - клавиатура скрывается сразу после нажатия на любую из кнопок.
//selective          - Булево - Опциональная! Показ клавиатуры только для определённых пользователей

//KeyboardButton - описание данных одной кнопки.
//text             - Строка - содержит описание кнопки. Если не заданы доп. флаги - будет послано как ответное сообщение
//request_contact  - Булево - Если истина - телефон пользователя будет отправлен как контакт, когда нажмётся кнопка. Доступно только в приватных чатах
//request_location - Булево - Если истина - отправит текущее положение пользователя. Доступно только в приватных чатах

//ОПИСАНИЕ - Клавиатура сообщения (InlineKeyboardMarkup), инлайн-кнопки
//inline_keyboard - Массив  - содержит массив данных кнопок (массив InlineKeyboardButton), выводимы под сообщением телеграм-бота 

//InlineKeyboardButton - массив данных одной кнопки в inline-режиме
//text                             - Строка       - текст, отображаемый на кнопке
//url			                   - Строка       - Опциональная! Ссылка на внешний сайт, когда нажмут на кнопку
//callback_data                    - Строка       - Опциональная! Данные, которые будут посланы боту в ответ на нажатие кнопки (1-64 bytes). 
//switch_inline_query              - Строка       - Опциональная! Если задано, то после нажатия на кнопку попросит у пользователя выбрать один из своих чатов и отправит туда имя бота и сообщение из данного параметра
//switch_inline_query_current_chat - Строка       - Опциональная! Если задано, то после нажатия на кнопку отправить в тот же чат имя бота и сообщения из данного параметра. Отлично подходит для выбора чего-нибудь из списка
//callback_game                    - CallbackGame - описывает какая игра должна быть запущена, когда пользователь нажмёт на кнопку
//pay                              - Булево       - высылает пользователю кнопку оплаты. 

Функция СформироватьКлавиатуруЧата(КомандаСправочника, Авторазмер = Истина, СкрыватьКлавиатуру = Истина)
	
	ОписаниеКлавиатуры = "";
	Если КомандаСправочника.КлавиатураЧата.Количество() <> 0 Тогда
		//получаем кнопки чата
		КнопкиЧата = Новый Массив;
		МассивКнопок = Новый Массив;
		Позиция = 1;
		Для каждого КнопкаКлавиатуры Из КомандаСправочника.КлавиатураЧата Цикл
			
			Если Позиция <> КнопкаКлавиатуры.Позиция Тогда
				Позиция = КнопкаКлавиатуры.Позиция;
				КнопкиЧата.Добавить(МассивКнопок);
				МассивКнопок = Новый Массив;
			КонецЕсли;
				
			ПараметрыКнопки = Новый Структура;
			
			ПараметрыКнопки.Вставить("text",             КнопкаКлавиатуры.text);
			
			Если КнопкаКлавиатуры.request_contact Тогда
				ПараметрыКнопки.Вставить("request_contact",  КнопкаКлавиатуры.request_contact);
			КонецЕсли;
			
			Если КнопкаКлавиатуры.request_location Тогда
				ПараметрыКнопки.Вставить("request_location",  КнопкаКлавиатуры.request_location);
			КонецЕсли;
			
			МассивКнопок.Добавить(ПараметрыКнопки);
			
		КонецЦикла;
		
		//для правильного формирования JSON-описания необходимо упаковать массив, в массив 
		КнопкиЧата.Добавить(МассивКнопок);
		
		СтруктураПараметровКлавиатуры = Новый Структура;
		СтруктураПараметровКлавиатуры.Вставить("keyboard",          КнопкиЧата);
		СтруктураПараметровКлавиатуры.Вставить("resize_keyboard",   Авторазмер);
		СтруктураПараметровКлавиатуры.Вставить("one_time_keyboard", СкрыватьКлавиатуру);
		ОписаниеКлавиатуры = СформироватьОписаниеКлавиатурыJSON(СтруктураПараметровКлавиатуры);	
	КонецЕсли;
	
	Возврат ОписаниеКлавиатуры;
	
КонецФункции

Функция СформироватьКлавиатуруСообщения(КомандаСправочника)
	
	ОписаниеКлавиатуры = "";
	Если КомандаСправочника.КлавиатураСообщения.Количество() <> 0 Тогда
		//получаем кнопки чата
		МассивКнопок = Новый Массив;
		КнопкиЧата = Новый Массив;
		Позиция = 1;
		Для каждого КнопкаКлавиатуры Из КомандаСправочника.КлавиатураСообщения Цикл
			
			Если Позиция <> КнопкаКлавиатуры.Позиция Тогда
				НомерСтроки = КнопкаКлавиатуры.Позиция;
				КнопкиЧата.Добавить(МассивКнопок);
				МассивКнопок = Новый Массив;
			КонецЕсли;
			
			ПараметрыКнопки = Новый Структура;
			
			ПараметрыКнопки.Вставить("text", КнопкаКлавиатуры.text);
			
			Если ЗначениеЗаполнено(КнопкаКлавиатуры.url) Тогда
				ПараметрыКнопки.Вставить("url",  КнопкаКлавиатуры.url);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КнопкаКлавиатуры.callback_data) Тогда
				ПараметрыКнопки.Вставить("callback_data",  КнопкаКлавиатуры.callback_data);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КнопкаКлавиатуры.switch_inline_query) Тогда
				ПараметрыКнопки.Вставить("switch_inline_query",  КнопкаКлавиатуры.switch_inline_query);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КнопкаКлавиатуры.switch_inline_query_current_chat) Тогда
				ПараметрыКнопки.Вставить("switch_inline_query_current_chat",  КнопкаКлавиатуры.switch_inline_query_current_chat);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КнопкаКлавиатуры.callback_game) Тогда
				ПараметрыКнопки.Вставить("callback_game",  КнопкаКлавиатуры.callback_game);
			КонецЕсли;
			
			Если КнопкаКлавиатуры.pay Тогда
				ПараметрыКнопки.Вставить("pay",  КнопкаКлавиатуры.pay);
			КонецЕсли;
			
			МассивКнопок.Добавить(ПараметрыКнопки);
			
		КонецЦикла;
		
		//для правильного формирования JSON-описания необходимо упаковать массив, в массив 
		//КнопкиЧата = Новый Массив;
		КнопкиЧата.Добавить(МассивКнопок);
		
		СтруктураПараметровКлавиатуры = Новый Структура;
		СтруктураПараметровКлавиатуры.Вставить("inline_keyboard", КнопкиЧата);
		ОписаниеКлавиатуры = СформироватьОписаниеКлавиатурыJSON(СтруктураПараметровКлавиатуры);
	КонецЕсли;
	
	Возврат ОписаниеКлавиатуры; 
КонецФункции

//Отправляет сообщение в телеграмм
//
//ПАРАМЕТРЫ:
//chat_id - Строка - Ид чата, в который необходимо отправить сообщение
//ТекстСообщения - Строка - текст сообщения, которое будет выведено пользователю
//КлавиатураВСообщении - Строка - кнопки, которые необходимо вывести для пользователя
Функция ОтправитьСообщениеВТелеграмм(chat_id, ТекстСообщения, КлавиатураВСообщении = Неопределено) Экспорт
	
	Команда = ПараметрыКоманднойСтрокиБота().ОтправитьСообщение + 
	ПараметрыКоманднойСтрокиБота().ИдЧата + chat_id + 
	ПараметрыКоманднойСтрокиБота().ТекстСообщения + ЗаменитьНедопустимыеСимволы_HTTP_URL_Кодом (ТекстСообщения);
	
	Если КлавиатураВСообщении <> Неопределено И ЗначениеЗаполнено(КлавиатураВСообщении) Тогда
		Команда = Команда + ПараметрыКоманднойСтрокиБота().Клавиатура + ЗаменитьНедопустимыеСимволы_HTTP_URL_Кодом (КлавиатураВСообщении);
	КонецЕсли;
	
	Ответ = ОбработатьКомандуНаСервереТелеграм(Команда);
	Ответ = Неопределено;
	
КонецФункции

//Отправляет на сервер телеграмм команду и возвращает ответ, полученный от сервера
//
//ПАРАМЕТРЫ
//Команда - Строка - команда для сервера
Функция ОбработатьКомандуНаСервереТелеграм(Команда)
	
	Ресурс     = Бот.Токен + Команда;
	Соединение = Новый HTTPСоединение(Бот.Сервер, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	Запрос     = Новый HTTPЗапрос(Ресурс);
	КоличествоПопыток = 3;
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Ответ      = Соединение.Получить(Запрос);
			Прервать;
		Исключение
			ЗаписьЖурналаРегистрации("ИнтеграцияСТелеграмм: ОбработатьКомандуНаСервереТелеграм", 
			УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные, 
			Бот, 
			"Ошибка при соединения с сервером телеграм! 
			|Данные ошибки: "+ОписаниеОшибки() + "
			|Данные выполнения: "+ Бот.Наименование + ", кол. попыток: " + СчетчикПопыток + ", " + Лев(Команда, 100));
		КонецПопытки;
	КонецЦикла; 
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти //Работа_с_Сервером_Телеграм

//формирует JSON-строку, с описанием клавиатуры, которая будет показана пользователю
//
//Параметры:
//ВходящиеДанные - Структура - структура параметров JSON
Функция СформироватьОписаниеКлавиатурыJSON(ВходящиеДанные)
	
	ПараметрыТекст = Новый ПараметрыЗаписиJSON;
	
	КлавиатураТекст = Новый ЗаписьJSON;
	КлавиатураТекст.ПроверятьСтруктуру = Ложь;
	КлавиатураТекст.УстановитьСтроку(ПараметрыТекст);
	ЗаписатьJSON(КлавиатураТекст, ВходящиеДанные);
	
	Возврат КлавиатураТекст.Закрыть();
	
КонецФункции


Функция СконвертироватьВремяUnixTS(UnixTime) 
Возврат дата(1970,1,1,1,0,0) + unixtime;
КонецФункции  


Функция ЗаменитьНедопустимыеСимволы_HTTP_URL_Кодом (Знач Текст)
	Текст = СтрЗаменить(Текст, "&", "%26");
	Возврат Текст;
КонецФункции

#Область Программные_Перечисления

//содержит параметры команд телеграм-бота
//специально скрываю их за перечислением, чтобы улучшить читабельность кода и заодно сразу пояснить какой-параметр за что отвечает
//содержит следующие команды:
//НовыеСообщения (getUpdates) - команда получения новых сообщений бота
//		- НомерПолучаемогоСообщения(offset) - номер сообщения, начиная с которого необходимо получать новые сообщения
//ОтправитьСообщение (sendMessage) - Отправить сообщение
//		- ИдЧата (chat_id) - ид чата, в который необходимо отправить сообщение
//		- ТекстСообщения (text) - текст сообщения, которое будет показано пользователю
//		- Клавиатура (reply_markup) - клавиатура, которая будет показана пользователю. Если передать пустой параметр, то клавиатура не будет показана
//			- ТекстКнопки (text) - наименование кнопки
//			- КодВозврата (callback_data) - строка, которую вернет нажатие кнопки
Функция ПараметрыКоманднойСтрокиБота()
	
	Если НЕ мСтруктураКэшДанных.Свойство("ПараметрыКоманднойСтрокиБота") Тогда
		
		ДоступныеКоманды = Новый Структура;
		//получение новых сообщений от телеграм-бота; 
		ДоступныеКоманды.Вставить("НовыеСообщения",            "/getUpdates");
		ДоступныеКоманды.Вставить("НомерПолучаемогоСообщения", "?offset=");
		
		//сообщение и его параметры
		ДоступныеКоманды.Вставить("ОтправитьСообщение", "/sendMessage");
		ДоступныеКоманды.Вставить("ИдЧата",             "?chat_id=");
		ДоступныеКоманды.Вставить("ТекстСообщения",     "&text=");
		ДоступныеКоманды.Вставить("Клавиатура",         "&reply_markup=");
		
		//Параметры клавиатуры
		ДоступныеКоманды.Вставить("ТекстКнопки",  "text");
		ДоступныеКоманды.Вставить("КодВозврата",  "callback_data");
		
		мСтруктураКэшДанных.Вставить("ПараметрыКоманднойСтрокиБота", Новый ФиксированнаяСтруктура(ДоступныеКоманды));
	КонецЕсли; 
	
	Возврат мСтруктураКэшДанных.ПараметрыКоманднойСтрокиБота;
КонецФункции

//содержит типы сообщений, которые могут быть отправлены/получены телеграм-ботом
//	Сообщение (message) - простое сообщение пользователю (может быть текст, картинка...)
//	НажатиеКнопки (callback_query) - нажатие на кнопку клавиатуры, которое необходимо обработать
Функция ТипыСообщенийТелеграмБота()
	
	Если НЕ мСтруктураКэшДанных.Свойство("ТипыСообщений") Тогда
		
		ДоступныеКоманды = Новый Структура;
		ДоступныеКоманды.Вставить("Сообщение", "message");
		ДоступныеКоманды.Вставить("НажатиеКнопки", "callback_query");
		
		мСтруктураКэшДанных.Вставить("ТипыСообщений", Новый ФиксированнаяСтруктура(ДоступныеКоманды));
	КонецЕсли; 
	
	Возврат мСтруктураКэшДанных.ТипыСообщений;
		
КонецФункции

#КонецОбласти //Программные_Перечисления

мСтруктураКэшДанных = Новый Структура;

